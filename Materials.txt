
What is Javascript?

 The javascript is programming language.

Style of javascript

 standalone styles - inital java - before java 8 -  object oriented programming language
 hybrid styles - mixing many styles in one place.java 8  hybrid style language

javascript was designed as hybrid programming language.
 
javascript supports "functional style","Object based","Event driven" .

History of javascript programming:
..................................

1989 - Web Project was started    -------Sun created Java

1990 -  The first webserver,Browser was created

1994 - Netscap started

1995 - The first netscap navigator came to access web pages 

1996 - Netscap decided to put java inside webbrowser.

----Static web----- only hand coded html pages.

1996 - CREATED Dynamic web : how to work with databases
     - CGI - C,perl.
 J2EE- Servlets,JSP
 MS  - ASP
 OPEN SOURCE - PHP.

 Server side web : create html pages on fly by including data from databases.

Netscap decided to build client side web technoloy- once html is rendered into web browser
how to change that html onfly. 

Netscap decided to create a new programming language, who recurited Brendan Eich
,the programmer , asked to create new programming language for netscap navigator.

-Objective of Project

-It should be like java but it should not be java -light weight - scripting
-deadline is 10 days.

Time line:

1.javascript project started 1995

1.first name of the language was "Mocha"
2.language was renamed to "Live Script" -1996
3.language was renamed to "java Script" -1996



After language ready, which was submitted to standard body "ECMA international"

1996---1997 : JS 1.0 =>ES 1.0

1997- 1998 :  ES 2.0: It did not come

1999 :  ES 3

2007 : ES 4

2008 : ES 5

2012-2015 : ES 6

2016  ONWARDS : es 7,es 8, ......

//////////////////////////////////////////////////////////////////////////////////////////


...........................................................................................

Compilation,Execution, Runtime:
...............................

Javascript has no independant compiler like c++/java.

Runtime: 

 It is program, written in c / c++ , any language.
 Runtime is abstraction/communication layer between os and application programms.

Types of runtime:

1.embeded runtime
  embeded into another software
 eg:
   embeded game engines...
   browsers has lot of embbeded 

   webservers which running java code : tomcat

2.standalone runtime
  which is avaiable separatly
  JVM


Javascript runtime:
...................
 it is avaiable in both mode.

Embeded mode:
  js runtime is avaiable inside every browser.

chrome : V8 
firefox : Spider Monkey
ms : chakra .

standalone mode:
  node js, which has standalone js runtime.
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

Does javascript code is compiled?

 Yes! , inside javascript runtime, which has embbeded compiler.
////////////////////////////////////////////////////////////////////////////////////////////

We are going to use v8:
  "V8 is Googleâ€™s open source high-performance JavaScript and WebAssembly engine, written in C++. 
It is used in Chrome and in Node.js, 
////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////
Where is javascript ? what type of applications we can build using javascript?

1.javascript was created for browser only to process web documents.

Now a days  javascript is used every where.

1. javascript is in server side market : for build Webapps,webservices :Node.js
2. javascript is in mobility  : build mobile applications
3. javascript is in IOT : build any device specific applications.
/////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////

Java Script Programming language: ES 5 AND ES 6
...............................................

1.language fundamentals
2.functional programming
3.Object based programming
4.Browser specific features
   DOM,AJAX.

Node Js:
   Build Nonblocking IO applications 

/////////////////////////////////////////////////////////////////////////////////////////

language fundamentals:

1.type system
2.variables
3.values-literals
4.operators
5.conditional and iterators


Helloworld

index.js

how to run code?

1.via browser

index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=<device-width>, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script src="src/index.js"></script>
</body>
</html>

2.via node platform

$node src/index.js
///////////////////////////////////////////////////////////////////////////////////////////

Javascript is dynamic language:
 during runtime we can modify code.

Type system:

 How to represent data 

Strongly/Static typed languages

 The variable is verfied by the compiler during compile time

eg:
  int a =10;

  a ="hello" ; compiler will show error.

eg: c,c++,java,c#

Weakly/Dynamic typed languages


  The variable type is verifed by the runtime during execution

   def/var(keyword) variableName=value

 eg:
   var a =10;
   a="hello"
  it is perfectly valid

eg:
 js
/////////////////////////////////////////////////////////////////////////////////////////////

How to declare variables?

ES 5

var
Declares a variable, optionally initializing it to a value.

ES 6
let
Declares a block-scoped, local variable, optionally initializing it to a value.
const
Declares a block-scoped, read-only named constant.

this 
  keyword used to declare instance variables(objects)


syntax:

 keyword(var/let/const/this) variableName = value(literal)
 

//how to declare variable

var firstName="Subramanian";
console.log("First Name" + firstName);


literals : values based on it only the type of variable is identified during runtime.

literals types:

1.string
2.number
3.boolean
4.undefined
5.NaN
6.infinity
7.function
8.null
9.object

 var : is used in es 5
 let and const is used in es 6
 this : both version



Note: 
1.var,let,const all are same only but there are few differences, to be disucssed latter.
 var vs let and const.

2.In js ; is optional 


Point:

  if you are building javascript application based on es 6, recommandation is use "let and
const" always.

1.strings:

1.16 bit unicode charaters.

2.strings can be declared inside  "" or ''  or ``(back-tick) es 6 feature
   "" : inspired from java and c++
   '' : js specific notation.
  
3.string concatnation can be done
   +  and , and `foo ${variableName}`
//strings

var firstName = "Subramanian"
var lastName = 'Murugan';

console.log(" Name " + firstName + " " + lastName);
console.log(" Name ", firstName, " ", lastName);

//es 6 concatation syntax. `${variableName}` - interpolation

console.log(`Name ${firstName} ${lastName} `)

//Roles of `` notation : string concation,multi line string litreal.

var title = 'Game Portal'

var htmlDoc = "<html>" +
    "<head><title>" +
    title +
    "</title>" +
    "</head>" +
    "<body><h1>Sony Digital</h1>" +
    "</body></html>";
console.log(htmlDoc);

var newHtmlDoc = `
    <html>
      <head>
        <title>${title}</title>
    </head>
    <body><h1>Astro Gaming Site</h1>
    </body></html>
`;
console.log(newHtmlDoc);
//////////////////////////////////////////////////////////////////////////////////////////////

Numbers:

1.number size is 64 bit by default aka double.
2.It is IEEE 754 Standard.
//numbers

var qty = 10;
var price=1000000000000000000000000000;
console.log(`Qty ${qty}`);
console.log(`Price ${price}`)


Booleans:

1.represents true or false 
2.1 bit value.

//boolean

var isEnabled =true;
var isWorking=false;

console.log(`Enabled ${isEnabled}`)
console.log(`Isworking ${isWorking} `);



undefined:
..........
It is value, assigned to a variable, if no valid literal is assigned.


var firstName;
var price;
var qty;
console.log(`First Name ${firstName}`);
console.log(`price ${price} ${qty}`);

///////////////////////////////////////////////////////////////////////////////////////////

Related to Numbers:

1.NaN :Not a Number 

Not a Number but is number.
NaN represents error code.
NaN error code will come due to "numerical compuation failures".

Note:

 if you get NaN as out put, it is danger/toxic , it is runtime error, you need to fix.


When NaN will come?
 
//NaN use case 1; if you do numerical compuation against undefined

var qty; //undefined
var price = 1000;

var totalPrice = qty * price;
console.log(`Qty ${qty} price ${price} Total Price ${totalPrice}`)


Type conversion : string to number

types of Type conversion

1.implicit Type conversion
 js automatically converts string to number
2.explicit Type conversion
 js uses conversion utility apis to convert string to number.

//NAN

var qty; //undefined
var price = 1000;

var totalPrice = qty * price;
console.log(`Qty ${qty} price ${price} Total Price ${totalPrice}`)
//Type conversion

var count = "10"; // it string type but value is numerical value

//Type conversion happened here; implicit conversion
var totalCount = count * 10;
console.log(`Total Count ${totalCount}`);

//Type conversion using js built in api.
//double(64 bit) to 32 bit(integer)
var totalCounter = parseInt(count) * 10;
console.log(`Total Count ${totalCounter}`);
var totalCounterdouble = parseFloat(count,16) * 10;
console.log(`Total Count ${totalCounterdouble}`);


//Nan and type conversion
// here $100 is not numerical so during type conversion, error is thrown.
var stockValue = "$100";
var totalStock  = parseInt(stockValue) * 100;
console.log(`Total Stock ${totalStock}`);


2.infinity
div by 0


var price = 1000;
var avgPrice = price / 0;
//Avg Price Infinity
console.log(`Avg Price ${avgPrice}`);

////////////////////////////////////////////////////////////////////////////////////////////
Advanced booleans:
  
js supports booleans with value of true / false

In js every thing is true expect the following values.

Falsy Values:

1.boolean false
2.0
3.undefined
4.empty string "",''
5.NaN
6.null



//Advanced boolean

var firstName = "Subramaian";

if (firstName) {
    console.log("firstName found")
} else {
    console.log("firstName not found")
}
var lastName = "";

if (lastName) {
    console.log("lastName found")
} else {
    console.log("lastName not found")
}

var age = 18;

if (age) {
    console.log("age found")
} else {
    console.log("age not found")
}

var count = 0;

if (count) {
    console.log("count found")
} else {
    console.log("count not found")
}


var price;

if (price) {
    console.log("price found")
} else {
    console.log("price not found")
}


var totalPrice = price *100;

if (totalPrice) {
    console.log("totalPrice found")
} else {
    console.log("totalPrice not found")
}
/////////////////////////////////////////////////////////////////////////////////////////////

type of operator:
.................

1.returns type of variable in string format, in a smaller case

  "string","numbers"


//type of operator

var str = "hello";
var n = 100;
var u;
var b = true;
var notanumber = n * u;
var avg = 100 / 0;
//object ,null,function types to be discussed later.

console.log(`type of str ${typeof str}`)
console.log(`type of n ${typeof n}`)
console.log(`type of b ${typeof b}`)
console.log(`type of u ${typeof u}`)
console.log(`type of notanumber ${typeof notanumber}`)
console.log(`type of avg ${typeof avg}`)
///////////////////////////////////////////////////////////////////////////////////////////

Operators:

Assignment operators
Comparison operators
Arithmetic operators
Bitwise operators
Logical operators
String operators
Conditional (ternary) operator
Comma operator
Unary operators
Relational operators

///////////////////////////////////////////////////////////////////////////////////////////

Assignement

Assignment	x = y	   x = y

Addition assignment	x += y	x = x + y
Subtraction assignment	x -= y	x = x - y
Multiplication assignment	x *= y	x = x * y
Division assignment	x /= y	x = x / y
Remainder assignment	x %= y	x = x % y
Exponentiation assignment	x **= y	x = x ** y
Left shift assignment	x <<= y	x = x << y
Right shift assignment	x >>= y	x = x >> y
Unsigned right shift assignment	x >>>= y	x = x >>> y
Bitwise AND assignment	x &= y	x = x & y
Bitwise XOR assignment	x ^= y	x = x ^ y
Bitwise OR assignment	x |= y	x = x | y
Logical AND assignment	x &&= y	x && (x = y)
Logical OR assignment	x ||= y	x || (x = y)
Logical nullish assignment	x ??= y	x ?? (x = y)

//assignment operator

var x = 10;
var y = x;
console.log(`x ${x} y ${y}`);

var myvar = 10;
console.log(`Myvar value is ${myvar} and its type is ${typeof myvar}`)
//reassingment/ re initalization
myvar = "Hello"
console.log(`Myvar value is ${myvar} and its type is ${typeof myvar}`)

var a = 100;
var b = 100;
var c = a + b;
console.log(`C value is ${c}`)
var d = 10;
d = d + 1;
console.log(`d value is ${d}`)
d += 1
console.log(`d value is ${d}`)

///////////////////////////////////////////////////////////////////////////////////////////

Arthimetic Operators;
.....................

numerical operators
 +,-,*,/,%
 ++,--,
 ** - exponent

//arthimetic 

var x = 100;
var y = 100;
console.log(x + y)
console.log(x - y)
console.log(x * y)
console.log(x / y)
console.log(x % y)
console.log(x ** 2)

Bitwise operators and shift operators:
Note : not recommend to overuse in js, js need to convert 64 bit to 32 bit and starts operations.

Logical operators:
...................

Logical AND (&&)

expr1 && expr2	Returns expr1 if it can be converted to false; otherwise, returns expr2. Thus, when used with Boolean values, && returns true if both operands are true; otherwise, returns false.

Logical OR (||)	expr1 || expr2	Returns expr1 if it can be converted to true; otherwise, returns expr2. Thus, when used with Boolean values, || returns true if either operand is true; if both are false, returns false.

Logical NOT (!)	!expr	Returns false if its single operand that can be converted to true; otherwise, returns true.

Logical !! -  keeps the same value.

//logical operators
//
//|| or - based on boolean truth table

var isWorking = true;
var isEnabled = false;
var res = isWorking || isEnabled;
console.log(res);
//advanced or operator.

var name = "Subramaian";

/**
 * if first operand(name) is truthy, then result is first operand itself else
 * second operand
 */

var message = name || "Sorry";

console.log(message);

var price = 0;
var todayMinPrice = price || 10;

console.log(todayMinPrice);
///////////////////////////////////////////////////////////////////////////////
//And operator is opposit to or operator

var andRes = isWorking && isEnabled
console.log(andRes);

/**
 * if first operand(name) is truthy, then result is second operand  else
 * first operand
 */

message = name && "Sorry";
console.log(message);
todayMinPrice = price && 10;
console.log(todayMinPrice);
/////////////////////////////////////////////////////////////////////////////

//inverter !

var reached =true;
console.log(!reached)
var mycount =1000;
console.log(!mycount)

//dont invert !!
console.log(!!reached)
console.log(!!mycount)

///////////////////////////////////////////////////////////////////////////////////////

Conditional (ternary) operator
The conditional operator is the only JavaScript operator that takes three operands. The operator can have one of two values based on a condition. The syntax is:

condition ? val1 : val2

condition would be truthy or falsy

//tenary operators

var isEnabled = true;

var res = isEnabled ? "Enabled" : "Disabled";
console.log(res)

var name;
var found = name ? "Found" : "Not Found";
console.log(found)
/////////////////////////////////////////////////////////////////////////////////////////

Comparsional operators:
......................

1. less than <
2. less than or equal <=
3. greater than >
4. greater than or equal >=
5. ==, === equal
6. !=,!==

//relational operators

var x = 100;
var y = 10;
console.log((x < y) ? "less" : "not less")
console.log((x > y) ? "great" : "not great")
// == 

console.log((x == y) ? "equal" : "not equal")
console.log((x === y) ? "equal" : "not equal")

var a = "10";
var b = 10;
//test only value
console.log((a == b) ? "equal" : "not equal")
//test type + value : recommended operator ===
console.log((a === b) ? "equal" : "not equal")

console.log((a != b) ? "equal" : "not equal")
console.log((a !== b) ? "equal" : "not equal")
/////////////////////////////////////////////////////////////////////////////////////////////

Advanced operators

1.typeof - to know the type of variable
2.new  -  to allocate memory ; object creational operator
3.instance of - to know the parent type
4. in -  used with collection iterators
5. "." - object access operators
6. [] -  used to represent arrays elements &&  used to access object properties
7.{} -  to represent block of statements
8. of -  used with for loop
/////////////////////////////////////////////////////////////////////////////////////////////

Conditional statments and Control Structures:
..............................................

1.Decision making:

 if
 if..else
 if..elseif
 if ..elseif..else
 switch...case

statements:
  break;
 
//if and else

var a = 100;
var result='';
if (a > 0) {
    result = 'positive';
} else {
    result = 'NOT positive';
}
console.log(result)

..if..else if
var x = 10;

if (x > 50) {
    console.log("X is greater than 50")

} else if (x > 5) {
    /* do something */
    console.log("X is greater than 5")
} else {
    /* do something */
    console.log("No match found")
}
.........................................................................................



switch (expression) {

  case value1:
    //Statements executed when the
    //result of expression matches value1
    [break;]
  case value2:
    //Statements executed when the
    //result of expression matches value2
    [break;]
  ...
  case valueN:
    //Statements executed when the
    //result of expression matches valueN
    [break;]
  [default:
    //Statements executed when none of
    //the values match the value of the expression
    [break;]]
}

var expr = 'Papayas';
switch (expr) {
    case 'Oranges':
        console.log('Oranges are $0.59 a pound.');
        break;
    case 'Mangoes':
    case 'Papayas':
        console.log('Mangoes and papayas are $2.79 a pound.');
        // expected output: "Mangoes and papayas are $2.79 a pound."
        break;
    default:
        console.log(`Sorry, we are out of ${expr}.`);
}

//////////////////////////////////////////////////////////////////////////////////////////

Iterators -  loops;

1.for
2.while
3.do..while
4.for..in
5.for..of

var str = '';

for (var i = 0; i < 9; i++) {
    str = str + i;
}

console.log(str);

var n = 0;

while (n < 10) {
    console.log(n)
    n++;
}

console.log(n);
// expected output

var result = '';
var i = 0;

do {
    i = i + 1;
    result = result + i;
} while (i < 5);

console.log(result);
// expected result: "12345"

/////////////////////////////////////////////////////////////////////////////////////////////

Functions:
..........

What is function?

 function is block, inside we can define the logic.

syntax :

function declaration

 function functionName(args) {

   //block of code
 }

function invocation.


//define basic functions

function sayHello() {
    //block of code
    console.log('hello javascript')
}
//function invocation.
sayHello();

////////////////////////////////////////////////////////////////////////
The function with logic:
function add() {
    var a = 10;
    var b = 20;
    var c = a + b;
    console.log(`The addition ${c}`)
}
add()
/////////////////////////////////////////////////////////////////////////////////////////////
//parameters and args:
.....................

-javascript is type less , so args can take any type of literal

//function args and parameters
//message is arg
function sayHello(message) {
    console.log(message);
}
//pass value is here parameter
sayHello('Hello');
sayHello(10)
sayHello(true)
sayHello()
sayHello(NaN)


function add(a, b) {
    var result = a + b;
    console.log(result)
}
add(10, 10);
add()
add("10", "20")
add("10", 10)
add(10)
add(8, 8, 10)

function multiply(a, b) {
    //default value initalization if variables having undefined 
    //this is es 5 style
    a = a || 0;
    b = b || 0;
    var res = a * b;
    console.log(res);
}
multiply(10, 10)
multiply()
//es 6 style of default value initalizaiton
//default args
function multiplyE6(a = 0, b = 0) {
    var res = a * b;
    console.log(res);
}
multiplyE6(18, 10)
multiplyE6()
/////////////////////////////////////////////////////////////////////////////
//what if i want to pass more parameters, i dont know in advance how many args 
//i pass
function logger() {
    //arguments : built in variable, holding all parameter values
    console.log(arguments) //es 5 syntax
}
logger('hello')
logger('hello', 'greet')
logger('hello', 'welldone', 'good', 'js')

//Rest Operator : ... es 6 syntax to replace "arguments"
function sum(...numbers) {
   console.log(numbers)
}
sum(1, 2, 4);
sum(1, 2, 3, 4, 5, 6, 7, 8)

//////////////////////////////////////////////////////////////////////////////////////////////

What(literal) can be passed as parameter?

All literals can be passed as parameter.
 -strings,numbers,boolean,undefined,function,null,object,nan,infinity.


functions types:

1.user defined functions
  eg ; sayHello,add,compute
2.global built in functions
   functions are defined by js language.
 parseInt,parseFloat,isNaN,eval,isFinite,encodeURI(),decodeURI...


function compute(res) {
    if (isNaN(res)) {
        console.log('SOrry computation is failed')
    } else {
        console.log(res);
    }
}
var x = 10;
var y = 20
compute(x * y)
x = "$10"
compute(x * y)

function findAvg(a, b) {
    var res = a / b;
    if (res === Infinity) {
        console.log('div by 0 ')
    } else {
        console.log(res);
    }
}
findAvg(10, 2)
findAvg(10, 0)
////////////////////////////////////////////////////////////////////////////////////////////

How to return values from the function?

function can return any literal
///function returns

///function returns

function sayHello() {
    return 'Hello';
}
console.log(sayHello())

function sayHai() {
    var message = 'hai'
    return message;
}
console.log(sayHai())

function sayGreet() {
    return;
}
console.log(sayGreet())

function add(a = 1, b = 1) {
    return a + b; //expression
}
console.log(add(1, 2))

function validate(username = 'root', password = 'root') {
    if (username === 'admin' && password === 'admin') {
        return true;
    }
    return;
}
validate() ? console.log('success') : console.log('failed')
validate('admin','admin') ? console.log('success') : console.log('failed')

////////////////////////////////////////////////////////////////////////////////////////////

How to implement recurssive functions?
fact

function factorial(n) {
    if ((n === 0) || (n === 1))
        return 1;
    else
        return (n * factorial(n - 1));
}
console.log(factorial(5))


//////////////////////////////////////////////////////////////////////////////////////////
function literal(value)

literals can be assigned to a variable

let a =10;

since function itself literal can be assigned to a variable

//higher order func: function as parameter.

const fetch = function (success, failure) {
    if (typeof success === 'function' && typeof failure === 'function') {
        let status = true
        if (status) {
            success('This is success response')
        } else {
            failure('This is error response')
        }
    } else {
        console.log('invalid type')
    }
}

fetch(function (response) {
    console.log(response)
}, function (err) {
    console.log(err)
})
fetch(100, 'afdfdffa')
..................................................................................
				es 6 funcition literals
				 (Arrow functions)



//es 5 function declaration syntax
let hello = function () {
    console.log('hello')
}
//es 6 function declaration syntax : arrow function 
/**
 * 1.the value of this would be different in arrow function 
 * 2.the simple way of writing code - declarative programming.
 */

hello()

hello = () => {
    console.log('hello')
}
hello()
//if function has only one line of body : we can remove {}
hello = () => console.log('hello')
hello()
//args and parameters in arrow func 
let add = (a = 0, b = 0) => {
    let c = a + b
    console.log(`c ${c}`)
}
add(10, 90)

//return only value 
add = (a = 0, b = 0) => {
    return a + b
}
console.log(`c ${add(10, 90)
    }`)
//return only value , if there is no more code : we can remove {} and return statement
add = (a = 0, b = 0) => a + b
console.log(`c ${add(10, 90)
    }`)

//function with single arg , no default,return the same : we can remove {},(),
let getValue = value => value
console.log(getValue(90))


//higher order function and arrow 

// const greet = function (callback) {
//     callback()
// }

const greet = callback => callback('hai')


// let hai = function (response) {
//     console.log(response)
// }

let hai = response => console.log(response)
greet(hai)
// greet(function(response){
//     console.log(response)
// })
greet(response => console.log(response))

const fetch = (success, failure) => {
    if (typeof success === 'function' && typeof failure === 'function') {
        let status = true
        if (status) {
            success('This is success response')
        } else {
            failure('This is error response')
        }
    } else {
        console.log('invalid type')
    }
}

fetch(response => console.log(response), err => console.log(err))

....................................................................................
			 Scope

1.function scope - local scope
2.global scope - script scope
3.object scope
4.module scope

scope means visiability of a variable,function,class,literals....

any thing is declared inside function, is not available outside function

local scope :
 local variables,arg variables,functions declaration......

//
function counter(b = 90) {
    let a = 10;
    console.log('counter')
    //function body  - variables,functions 
    //inner function 
    function inc() {
        console.log('inc')
    }
    inc()
    let dec = function () {
        console.log('dec')
    }
    dec()

}
counter()
//inc()
//console.log(a)
//console.log(b)

//CURRY function : function returns a func and its returns another function and so on .. 

function outer() {
    return function () {
        console.log('innerone')
        return function () {
            console.log('inner two')
            return function () {
                console.log('inner three')
            }
        }
    }
}
outer()()()()

// function makeCake(sugar) {
//     return function (milk) {
//         return function (cream) {
//             return function (butter) {
//                 //compute all args which was passed 
//                 return `Cake is made with ${sugar} ${milk} ${cream} ${butter}`
//             }
//         }
//     }
// }

const makeCake = sugar => milk => cream => butter => `Cake is made with ${sugar} ${milk} ${cream} ${butter}`

const cake = makeCake('sugar')('milk')('cream')('butter')
console.log(cake)
....................................................................................
			var vs let and const



console.log(a)

var a = 10
//the variable is declared after declaration and initalization
console.log(a);

console.log(b)

here a is declarated before access, but js gives an output "undefined"..

undefined means the variable declared but no value is assigned


javascript code 

https://v8.dev/docs/ignition

1.source code
 index.js ---->parser---> parsed code(string lexical tree)-->compiler---ByteCode(assembly)


console.log(a)

var a = 10
//the variable is declared after declaration and initalization
console.log(a);

console.log(b)

2.parsed code
index.js

var a;
console.log(a)
a = 10
//the variable is declared after declaration and initalization
console.log(a);

let hai; //undefined

hai() ---runtime error

hai = function(){
    console.log('hai')
}


3.compiled code

//source code 
console.log('a before declaration', a)

//console.log(b)

var a = 10
//the variable is declared after declaration and initalization
console.log('after a', a);

let b = 100

console.log(b)

//parsed code:

//pushing variable declaration at top level is called "Hositing"
// var a;
// console.log(a)
// a = 10
// //the variable is declared after declaration and initalization
// console.log(a);

/**
 * Compile time 
 *    -parsing time 
 *        -code rearrangement happens
 *               -hositing
 * Runtime /execution time 
 *       -assembly code 
 */
/////////////////////////////////////////////////////////////////////////////////////

//this works fine 
sayHello()

function sayHello(){
    console.log('Hello')
}
sayHello()

hai()

var hai = function(){
    console.log('hai')
}
hai()
...................................................................................

functions and hositing:
//hositing inside function code 

/**any variables declared inside function also will be hosited inside function : function hositing */
function add() {
    console.log(a)
    var a = 10;
    var b = 20;
    var c = a + b
    console.log(a)
}
add()
............
block scope:
   the life of variable is available within {} which is called block scope.

function login(userName, password) {

    console.log(foo)
    if (userName === 'admin' && password === 'admin') {
        var foo = 'bar'
        console.log('login success')
    }
    console.log(foo)
}
login('admin','admin')

undefined
index.js:7 login success
index.js:9 bar

here also variable called foo is hoisted at function level, so js does not have blocking scope directly.

What if i want block scope?

ES 5:
   Immediate-Invoked Function Expression (IIFE)

//Immediate-Invoked Function Expression (IIFE)
/**
 * 1.anonmous function - 
 * 2.gets invoked automatically.
 * 3.In jquery
 */

var status = (function (lib) {
    console.log('app', lib)
    return 'done'
})('jQuery')
console.log(status)



function login(userName, password) {
    //console.log(foo)
    if (userName === 'admin' && password === 'admin') {
        (function () {
            var foo = 'bar'
            console.log('login success')
        })()
    }
    console.log(foo)
}
login('admin', 'admin')

ES 6 introduced new keyword which does not leak the scope- perserves the block scope-let and const


// function login(userName, password) {
//     //console.log(foo)
//     if (userName === 'admin' && password === 'admin') {
//         (function () {
//             var foo = 'bar'
//             console.log('login success')
//         })()
//     }
//     console.log(foo)
// }
function login(userName, password) {
        //console.log(foo)
        if (userName === 'admin' && password === 'admin') {
            // (function () {
            //     var foo = 'bar'
            //     console.log('login success')
            // })()
            let foo = 'bar'
            console.log('login success',foo)
        }
        console.log(foo)
    }
login('admin', 'admin')
.....................................................................................
				 Objects and javascript

According to ecma script spec, js is "object based langugage"

Object orientation vs Object based language:
............................................

Javascript is not strongly typed language.rather weakly typed/dynamic typed

int a=90;
a =true
compile time error.

Data types are verfied against variable during compile time.


var|let a=90;
a =true
here compile

For OO , we need strong typing, then only we can implement 100% oo, since js is weakly type which has implemented less and particial features only.
  if a language implements particial oo feature, which is called object based language.

oop
 ->Abstraction
      classes
 ->Encaspulation
       private,public
 ->Modularity
     
 ->Hierachy
    has-a, is-a
 ->Typing :strong typing
     -polymorphism
--------------------
 ->Concurrency
         Multi threading
 ->Persistency
        orm,storage

Implementation:

Object?
  Which represents an noun(person,entity...)

Object characteristics

1.state - properties
2.behahiour - actions which change/update property
3.identity  - to identify object uniquly from other objec

Object in program:

=>memory representation
=>collection of variables and methods - binding variables(state) and methods(behaviours)

state:
 instance variables
methods
 instance methods

How to create objects in javascript?

There are patterns

1.constructor pattern
  1.1.functions
  1.2.classes
2.literal pattern
3.factory pattern


//functions 
/**
 * 
 * functions having logic starts verb or verb+Noun
 *   eg add, addNumbers(),calculateInterest
 * functions are treated as class like java and c++, functions names must be noun
 *  eg: Employee,CreditCard,OrderService
 *    
 */

function add() {
    return 10 + 10
}
console.log(add())

function Employee() {
    //state : instance variables
    this.id = 1
    this.name = 'Subramanian'
    //behaviour:methods
    this.calculate = function () {
        return 100
    }
}
//new is keyword,
//Employee()-function call/constructor call
//emp is just variable, holding the memory address of object
//emp is reference variable
let emp = new Employee()

//how to access object properties(state,behaviour)
//. operator or [] operator
console.log(`Id ${emp.id}`)
console.log(`Name : ${emp.name}`)
console.log(`Calculate : ${emp.calculate()}`)

console.log(`Id ${emp['id']}`)
console.log(`Name : ${emp['name']}`)
console.log(`Calculate : ${emp.calculate()}`)


What is internal structure of object?

C++ decendants language object structure and js object structure is completly different
Every js object is hashtable/dictionary/map- key -value

key is string
value is any literal

Why js objects map?

  js language is highly dynamic
 during runtime objects can be modified

This process is called as "Object augmentation"

Add,update,delete,iterate object properties....


function Employee() {
    //single variable
    this.id = 1;
}
let emp = new Employee();
console.dir(emp)
//add new property
emp.name ='Subramanian'
console.dir(emp)
//update existing property
// if prop exits update, else add.
emp.name = 'Ram'
emp.city ='Coimbatore'
emp.state ='Tamil Nadu'
console.dir(emp)
//delete existing property
delete emp.state
//iterate :
//loop - object loop
for (const key in emp) {
    //[] operator is used to get object keys
   console.log(key,emp[key])
}


add()
new add()



//es 6 classes 

class Employee {
    //state : instance variables
    id = 1
    name = 'Subramanian'
    //behaviour:methods
    calculate() {
        return 100
    }
}
//object creation syntax
let emp = new Employee()
console.log(`id ${emp.id} ${emp.name} ${emp.calculate()}`)


constructors :
//state init using constructors

function Employee(id = 0) {
    this.id = id // hardcoded state 
}

//Employee() - this is constructor call
let emp = new Employee(1) //constructor parameters
console.log(emp)


class Customer {
    //id// hardcoded state
    constructor(id = 0, name = '', city = '') {
        this.id = id
        this.name = name
        this.city = city
    }
}
//Customer() is constructor call
let customer = new Customer()
console.log(customer)


Hoisting and classes:

let customer = new Customer()
console.log(customer)
function Customer (){

}

//var emp1 = new Employee()

class Employee {
    constructor(id=0){
        this.id =id;
    }
}
let emp = new Employee()


function declarations and class declarations is differ from "Hoisting".
 function can be hoisted where as classes not.


Class Expressions:
 classes can be assigned to a variables.

//class expression

let Rectangle = class {
    constructor(height, width) {
        this.height = height;
        this.width = width
    }
}
let rect = new Rectangle(10,10)
console.log(rect)

Why: every class is a function.


let Rectangle = class {
    constructor(height, width) {
        this.height = height;
        this.width = width
    }
}
let rect = new Rectangle(10,10)
console.log(rect)

console.log(typeof Rectangle) //Function.

static keyword in es 6 :


//variable types: instance variables,static variables
//instance variables are accessed with help of "reference" where as static variables are accessed with "className.variableName"


class Message {
    static WARNING = 'Warning'
    static ERROR = 'error'
    static SUCCESS = 'success'
   
}
console.log(Message.WARNING)

class Factory {
    //static methods 
    static getInstance(){
        return new Factory();
    }    
}
let factory = Factory.getInstance()
console.log(factory)
////////////////////////////////////////////////////////////////////////////////////

getters in classes:
 
In javascript, when you access property, interally it calls implicit get method.

emp.id ----> emp.getId

//gridTemplateRows: 


class Reactangle {
    constructor(height = 0, width = 0) {
        this.height = height
        this.width = width
    }
    //getter property
    get area(){
        return this.calcArea()
    }

    //biz methods
    calcArea(){
        return this.height * this.width
    }
}
let rct = new Reactangle(10,10)
// console.log(rct.calcArea())
console.log(rct.area)
.....................................................................................
			  Literal Objects
.....................................................................................

Objects are created without constructors(fun/class).
//literal objects 
/**
 *   object defintion(properties and its value) are enclosed with {}
 * 
 *  syntax:
 * let variable=  {
 *    key:value, 
 *    key:value
 *  }
 * key is variable
 * value is literal
 * literal can be any thing - nu/str/bool/unde,null,function,object,NaN
 * type of literal is based on type of value
 * 
 * what is type of key?
 *   the type of key always "string".
 * type of key not need to explicity declared with "",''
 * Can i declare with  in double quotes/single qutoes 
 *    Yes
 */

let emp = {
    id: 1,
    name: 'Subramanian',
    status: true
}
console.log(emp)
//keys are strings-valid
let user = {
    "id": 1,
    "name": 'Subramanian',
    "status": true,
    'city': 'Coimbatore'
}
console.log(user)

//how to introduce functions inside literal object : methods

let component = {
    init: function () {
        return 'init'
    }
}
console.log(component.init())

//arrow function
component = {
    init: () => 'init'
}
console.log(component.init())

//e6 class method syntax
component = {
    init() {
        return 'init'
    },
    destroy() {
        return 'destroy'
    },
    fetch() {
        return 'fetch'
    }
}
console.log(component.init(),component.destroy(),component.fetch())

//nested objects 
let user = {
    id: 1,
    name: 'Subramanian',
    //nested
    address: {
        city: 'Coimbatore'
    },
    location: {
        geo: {
            lat: 10.89,
            lng: 90.89
        }
    }
}
console.log(user.id)
console.log(user.name)
console.log(user.address.city)
console.log(user.location.geo.lat)
console.log(user.location.geo.lng)




// function printUserDetails(user) {
//     console.log(`Id ${user.id}`)
//     console.log(`Name ${user.name}`)
//     console.log(`City ${user.address.city}`)
//     console.log(`Lat ${user.location.geo.lat}`)
//     console.log(`Lng ${user.location.geo.lng}`)
// }
//Object Destructuring : breaking object properties into local variables

// function printUserDetails(user) {
//     //Destructure : unpacking varibles from the object 
//     const { id, name, address, location } = user
//     console.log(`Id ${id}`)
//     console.log(`Name ${name}`)
//     console.log(`City ${address.city}`)
//     console.log(`Lat ${location.geo.lat}`)
//     console.log(`Lng ${location.geo.lng}`)
// }
//destructure nested properties
// function printUserDetails(user) {
//     //Destructure : unpacking varibles from the object 
//     const { id, name, address: { city }, location: { geo: { lat, lng } } } = user
//     console.log(`Id ${id}`)
//     console.log(`Name ${name}`)
//     console.log(`City ${city}`)
//     console.log(`Lat ${lat}`)
//     console.log(`Lng ${lng}`)
// }

//destructuring inside func arg.
// function printUserDetails({ id, name, address: { city }, location: { geo: { lat, lng } } }) {
//     console.log(`Id ${id}`)
//     console.log(`Name ${name}`)
//     console.log(`City ${city}`)
//     console.log(`Lat ${lat}`)
//     console.log(`Lng ${lng}`)
// }

//destructuring with arrow functions
const printUserDetails = ({ id, name, address: { city }, location: { geo: { lat, lng } } }) => {
    console.log(`Id ${id}`)
    console.log(`Name ${name}`)
    console.log(`City ${city}`)
    console.log(`Lat ${lat}`)
    console.log(`Lng ${lng}`)
}
//values are passed to the function in two ways
//1.hardcoded 2.variables
let user = {
    id: 1,
    name: 'Subramanian',
    //nested
    address: {
        city: 'Coimbatore'
    },
    location: {
        geo: {
            lat: 10.89,
            lng: 90.89
        }
    }
}
printUserDetails(user)

//hardcoded values
printUserDetails({
    id: 1,
    name: 'Subramanian',
    //nested
    address: {
        city: 'Coimbatore'
    },
    location: {
        geo: {
            lat: 10.89,
            lng: 90.89
        }
    }
})
....................................................................................

//how to return object from the function and how to apply destructuring.

// function getUserDetails() {
//     let user = {
//         id: 1,
//         name: 'Subramanian',
//         //nested
//         address: {
//             city: 'Coimbatore'
//         },
//         location: {
//             geo: {
//                 lat: 10.89,
//                 lng: 90.89
//             }
//         }
//     }
//     return user ;
// }

// function getUserDetails() {
//     //here we return hardcoded values
//     //how to return dynamic objects with values
//     return {
//         id: 1,
//         name: 'Subramanian',
//         //nested
//         address: {
//             city: 'Coimbatore'
//         },
//         location: {
//             geo: {
//                 lat: 10.89,
//                 lng: 90.89
//             }
//         }
//     }
// }

//how to return dynamic properties
// function getUserDetails(id = 1, name = 'Subramanian', city = 'Coimbatore', lat = 1.0, lng = 90.0) {
//     return {
//         id: id,
//         name: name,
//         //nested
//         address: {
//             city: city
//         },
//         location: {
//             geo: {
//                 lat: lat,
//                 lng: lng
//             }
//         }
//     }
// }


// function getUserDetails(id = 1, name = 'Subramanian', city = 'Coimbatore', lat = 1.0, lng = 90.0) {

//     //if key:value ,leftSide:rightSide is same,return only one 
//     return {
//         id,
//         name,
//         //nested
//         address: {
//             city
//         },
//         location: {
//             geo: {
//                 lat,
//                 lng
//             }
//         }
//     }
// }

//arrow functions and object return
const getUserDetails = (id = 1, name = 'Subramanian', city = 'Coimbatore', lat = 1.0, lng = 90.0) => ({
    id,
    name,
    //nested
    address: {
        city
    },
    location: {
        geo: {
            lat,
            lng
        }
    }
})


console.log(getUserDetails())
console.log(getUserDetails(2, 'Ram', 'Chennai'))
....................................................................................
				classes and destructuring



class Reactangle {
    constructor(height = 0, width = 0) {
        this.height = height
        this.width = width
    }
    //biz methods
    // calcArea() {
    //     console.log('height func',this.height)
    //     return this.height
    // }
    calcArea = () => {
        console.log('height func', this.height)
        return this.height
    }
}
// let rct = new Reactangle(10,10)
// console.log(rct.width)
// console.log(rct.height)
// console.log(rct.calcArea())
let { width, height, calcArea } = new Reactangle(10, 10)

let rect = new Reactangle(10, 10)

console.log('width', width)
console.log('height', height)
console.log('area', rect.calcArea())
console.log('area', calcArea())

























































